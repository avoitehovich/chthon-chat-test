// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("CHTHON_POSTGRES_PRISMA_URL")
  directUrl = env("CHTHON_POSTGRES_URL_NON_POOLING")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  tier          String      @default("free") // Added tier field
  tierConfig    Json?       @map("tier_config") // Added tierConfig field
  credits       Int         @default(100)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  analytics     Analytics[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Chat {
  id        String    @id @default(cuid())
  title     String?
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  role      String
  content   String   @db.Text
  chatId    String   @map("chat_id")
  createdAt DateTime @default(now()) @map("created_at")
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  images    Image[]

  @@map("messages")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  messageId String   @map("message_id")
  createdAt DateTime @default(now()) @map("created_at")
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("images")
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  provider  String
  model     String
  tokens    Int
  cost      Float
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model Config {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("configs")
}
